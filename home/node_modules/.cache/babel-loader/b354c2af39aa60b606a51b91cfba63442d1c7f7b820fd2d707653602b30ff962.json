{"ast":null,"code":"import express from 'express';\nimport cors from 'cors';\nconst app = express();\napp.use(cors()); // Comando para usar antes das definições de rota \n// Liberação do CORS, assim permite req de outros domínios ou subdomínios\napp.use(express.json());\napp.use(express.urlencoded({\n  extended: true\n})); // Para que o servidor compreenda o formato correta foi avisado o tipo de body que aceita (json)\n// extended: true para que o parser se estenda a objetos encadeados\n\napp.get(\"/\", (req, res) => {\n  res.send('Home');\n});\napp.listen(8000);\n\n// Middlewares é uma função que intercepta cada requisição que a aplicação recebe\n// pelo método app.use() são declarados os middlewares do Express, toda requisição é respondida por um callback do tipo:\n// (req, res, next) => {}\n// A forma correta de tratar um erro é declarar um objeto Error e enviar para a função next(err) com um middleware após já ter declarado todas as rotas da aplicação\n\nexport default cors;","map":{"version":3,"names":["express","cors","app","use","json","urlencoded","extended","get","req","res","send","listen"],"sources":["C:/Códigos/Códigos/Portfólio/Lar/home/src/server/app.js"],"sourcesContent":["import express from 'express'\r\n\r\nimport cors from 'cors'\r\nconst app = express()\r\n\r\napp.use(cors())// Comando para usar antes das definições de rota \r\n// Liberação do CORS, assim permite req de outros domínios ou subdomínios\r\napp.use(express.json())\r\napp.use(express.urlencoded({extended: true})) // Para que o servidor compreenda o formato correta foi avisado o tipo de body que aceita (json)\r\n// extended: true para que o parser se estenda a objetos encadeados\r\n\r\napp.get(\"/\", (req, res) =>{\r\n    res.send('Home')\r\n})\r\n\r\napp.listen(8000)\r\n\r\n// Middlewares é uma função que intercepta cada requisição que a aplicação recebe\r\n// pelo método app.use() são declarados os middlewares do Express, toda requisição é respondida por um callback do tipo:\r\n// (req, res, next) => {}\r\n// A forma correta de tratar um erro é declarar um objeto Error e enviar para a função next(err) com um middleware após já ter declarado todas as rotas da aplicação\r\n\r\n\r\nexport default cors "],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAE7B,OAAOC,IAAI,MAAM,MAAM;AACvB,MAAMC,GAAG,GAAGF,OAAO,CAAC,CAAC;AAErBE,GAAG,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC,CAAC;AACf;AACAC,GAAG,CAACC,GAAG,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;AACvBF,GAAG,CAACC,GAAG,CAACH,OAAO,CAACK,UAAU,CAAC;EAACC,QAAQ,EAAE;AAAI,CAAC,CAAC,CAAC,EAAC;AAC9C;;AAEAJ,GAAG,CAACK,GAAG,CAAC,GAAG,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAI;EACtBA,GAAG,CAACC,IAAI,CAAC,MAAM,CAAC;AACpB,CAAC,CAAC;AAEFR,GAAG,CAACS,MAAM,CAAC,IAAI,CAAC;;AAEhB;AACA;AACA;AACA;;AAGA,eAAeV,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}